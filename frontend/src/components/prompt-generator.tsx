"use client";

import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { PromptStyleSelector } from "@/components/prompt-style-selector";
import { PromptResult } from "@/components/prompt-result";
import { useAuth } from "@/context/auth-context";
import { apiClient } from "@/lib/api";
import { Send, Sparkles, AlertTriangle } from "lucide-react";
import Link from "next/link";

const PROMPT_STYLES = [
  { id: 1, name: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π" },
  { id: 2, name: "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π" },
  { id: 3, name: "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π" },
  { id: 4, name: "–ü—Ä–æ—Å—Ç–æ–π" }
];

export function PromptGenerator() {
  const { user, token } = useAuth();
  const [prompt, setPrompt] = useState("");
  const [selectedStyleId, setSelectedStyleId] = useState<number | null>(null);
  const [result, setResult] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    console.log('üîê –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', {
      user: user ? {
        id: user.id,
        email: user.email,
        is_email_confirmed: user.is_email_confirmed
      } : null,
      token: token ? `${token.substring(0, 10)}...` : null,
      tokenLength: token?.length || 0
    });
    
    if (!user || !token) {
      setError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤");
      return;
    }

    if (!prompt.trim()) {
      setError("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞");
      return;
    }

    if (prompt.trim().length > 1000) {
      setError("–ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤)");
      return;
    }

    if (!selectedStyleId) {
      setError("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏");
      return;
    }

    if (selectedStyleId < 1 || selectedStyleId > 4) {
      setError("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∏–ª—å (1-4)");
      return;
    }

    setIsLoading(true);
    setError(null);
    setResult(null);

    try {
      const response = await apiClient.createPrompt(prompt.trim(), selectedStyleId, token);
      setResult(response.generated_prompt);
    } catch (err) {
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞");
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleRetry = () => {
    handleSubmit(new Event('submit') as any);
  };

  const handleReset = () => {
    setPrompt("");
    setSelectedStyleId(null);
    setResult(null);
    setError(null);
  };

  const selectedStyle = selectedStyleId 
    ? PROMPT_STYLES.find(style => style.id === selectedStyleId)
    : undefined;

  return (
    <div className="max-w-4xl mx-auto space-y-8">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="text-center space-y-2">
        <div className="flex items-center justify-center gap-2 mb-4">
          <Sparkles className="h-8 w-8 text-primary" />
          <h1 className="text-3xl font-bold tracking-tight">
            –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤
          </h1>
        </div>
        <p className="text-muted-foreground text-lg max-w-2xl mx-auto">
          –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
        </p>
      </div>

      {/* –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ */}
      {!user && (
        <Card className="border-amber-200 bg-amber-50 dark:bg-amber-900/20">
          <CardContent className="pt-6">
            <div className="flex items-start gap-3">
              <AlertTriangle className="h-5 w-5 text-amber-600 mt-0.5" />
              <div>
                <p className="text-amber-800 dark:text-amber-200 font-medium">
                  –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                </p>
                <p className="text-amber-700 dark:text-amber-300 text-sm mt-1">
                  –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.
                </p>
                <Button asChild className="mt-3" size="sm">
                  <Link href="/auth">
                    –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
                  </Link>
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞ */}
      <Card>
        <CardHeader>
          <CardTitle>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞</CardTitle>
          <CardDescription>
            –û–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∏–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <form onSubmit={handleSubmit} className="space-y-6">
            {/* –í–≤–æ–¥ –ø—Ä–æ–º–ø—Ç–∞ */}
            <div className="space-y-2">
              <Label htmlFor="prompt">–í–∞—à –∑–∞–ø—Ä–æ—Å</Label>
              <Input
                id="prompt"
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤"
                value={prompt}
                onChange={(e) => setPrompt(e.target.value)}
                className="min-h-[60px] resize-none"
                disabled={!user || isLoading}
                maxLength={1000}
              />
              <div className="flex justify-between items-center">
                <p className="text-xs text-muted-foreground">
                  –û–ø–∏—à–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å
                </p>
                <p className="text-xs text-muted-foreground">
                  {prompt.length}/1000
                </p>
              </div>
            </div>

            {/* –í—ã–±–æ—Ä —Å—Ç–∏–ª—è */}
            <div className="space-y-4">
              <Label>–°—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</Label>
              <PromptStyleSelector
                selectedStyleId={selectedStyleId}
                onStyleSelect={setSelectedStyleId}
                disabled={!user || isLoading}
              />
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
            <div className="flex items-center gap-3 pt-4">
              <Button 
                type="submit" 
                disabled={!user || !prompt.trim() || !selectedStyleId || isLoading}
                className="gap-2"
              >
                {isLoading ? (
                  <>
                    <Sparkles className="h-4 w-4 animate-pulse" />
                    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º...
                  </>
                ) : (
                  <>
                    <Send className="h-4 w-4" />
                    –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
                  </>
                )}
              </Button>
              
              {(result || error) && (
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={handleReset}
                  disabled={isLoading}
                >
                  –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
                </Button>
              )}
            </div>
          </form>
        </CardContent>
      </Card>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç */}
      <PromptResult
        result={result}
        isLoading={isLoading}
        error={error}
        onRetry={handleRetry}
        originalPrompt={prompt}
        selectedStyle={selectedStyle}
      />
    </div>
  );
}