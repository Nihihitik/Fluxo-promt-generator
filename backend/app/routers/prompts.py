from datetime import date
from typing import List, Optional
from fastapi import APIRouter, Depends, HTTPException, status, Request
from sqlalchemy.orm import Session
from pydantic import ValidationError
from core.database import get_db
from core.prompt_generator import generate_prompt, get_available_styles
from routers.auth import get_current_user
from models.user import User
from models.prompt_request import PromptRequest
from schemas.user import UserResponse
from schemas.prompt_request import PromptRequestCreate, PromptRequestResponse

router = APIRouter(prefix="/prompts", tags=["prompts"])


def check_daily_limit(db: Session, user: User) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    today = date.today()
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    if user.last_request_date != today:
        user.requests_today = 0
        user.last_request_date = today
        db.commit()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if user.requests_today >= user.daily_limit:
        return False
    
    return True


def increment_user_requests(db: Session, user: User):
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user.requests_today += 1
    db.commit()


@router.post("/create", response_model=PromptRequestResponse)
async def create_prompt(
    raw_request: Request,
    current_user: UserResponse = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
    print(f"üéØ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞:")
    print(f"  - Content-Type: {raw_request.headers.get('content-type', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
    print(f"  - Method: {raw_request.method}")
    print(f"  - URL: {raw_request.url}")
    print(f"  - User-Agent: {raw_request.headers.get('user-agent', '–Ω–µ —É–∫–∞–∑–∞–Ω')[:100]}...")
    
    # –ß–∏—Ç–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    try:
        request_data = await raw_request.json()
        print(f"  - JSON –¥–∞–Ω–Ω—ã–µ: {request_data}")
        print(f"  - –¢–∏–ø JSON: {type(request_data)}")
        
        # –°–æ–∑–¥–∞–µ–º Pydantic –º–æ–¥–µ–ª—å
        request = PromptRequestCreate(**request_data)
        print(f"  - –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ Pydantic –º–æ–¥–µ–ª—å: {request}")
        
    except ValidationError as e:
        print(f"  - –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Pydantic: {e}")
        print(f"  - –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {e.errors()}")
        raise HTTPException(
            status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
            detail=f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e.errors()}"
        )
    except Exception as e:
        print(f"  - –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
        )
    
    print(f"  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {current_user.email}")
    print(f"  - –ü—Ä–æ–º–ø—Ç: {request.original_prompt}")
    print(f"  - –°—Ç–∏–ª—å: {request.style_id}")
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user = db.query(User).filter(User.id == current_user.id).first()
    if not user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
    if not check_daily_limit(db, user):
        raise HTTPException(
            status_code=status.HTTP_429_TOO_MANY_REQUESTS,
            detail=f"–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ({user.daily_limit})"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Ç–∏–ª—è, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if request.style_id:
        available_styles = get_available_styles()
        if request.style_id not in available_styles:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ù–µ–≤–µ—Ä–Ω—ã–π ID —Å—Ç–∏–ª—è. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏: 1-4"
            )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
    generated_prompt = await generate_prompt(request.original_prompt, request.style_id)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–ø—Ä–æ—Å–µ
    prompt_request = PromptRequest(
        user_id=user.id,
        original_prompt=request.original_prompt,
        style_id=request.style_id,
        generated_prompt=generated_prompt
    )
    
    db.add(prompt_request)
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
    increment_user_requests(db, user)
    
    db.commit()
    db.refresh(prompt_request)
    
    return prompt_request


@router.get("/history", response_model=List[PromptRequestResponse])
async def get_user_history(
    current_user: UserResponse = Depends(get_current_user),
    db: Session = Depends(get_db),
    limit: int = 10,
    offset: int = 0
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    prompts = db.query(PromptRequest).filter(
        PromptRequest.user_id == current_user.id
    ).order_by(PromptRequest.created_at.desc()).offset(offset).limit(limit).all()
    
    return prompts


@router.get("/styles")
async def get_prompt_styles(
    current_user: UserResponse = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –ø—Ä–æ–º–ø—Ç–æ–≤"""
    return get_available_styles()


@router.get("/limits")
async def get_user_limits(
    current_user: UserResponse = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–º–∏—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = db.query(User).filter(User.id == current_user.id).first()
    if not user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    today = date.today()
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –¥–µ–Ω—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    if user.last_request_date != today:
        user.requests_today = 0
        user.last_request_date = today
        db.commit()
    
    return {
        "daily_limit": user.daily_limit,
        "requests_today": user.requests_today,
        "remaining_requests": user.daily_limit - user.requests_today,
        "last_request_date": user.last_request_date
    }