from typing import Optional


def generate_prompt(original_prompt: str, style_id: Optional[int]) -> str:
    """Генерирует промпт на основе исходного текста и стиля"""
    
    # Если стиль не указан, возвращаем исходный промпт
    if not style_id:
        return original_prompt
    
    # Применяем стиль к промпту
    styled_prompt = apply_style(original_prompt, style_id)
    
    return styled_prompt


def apply_style(prompt: str, style_id: int) -> str:
    """Применяет стиль к промпту на основе ID"""
    
    style_templates = {
        1: f"Ты профессиональный эксперт в данной области. Дай точный и компетентный ответ на следующий вопрос: {prompt}",
        2: f"Подойди к этому вопросу творчески и нестандартно. Предложи оригинальные идеи и решения: {prompt}",
        3: f"Проанализируй этот вопрос детально и структурированно. Разбери по пунктам и дай всесторонний анализ: {prompt}",
        4: f"Объясни это простым и понятным языком для новичка. Используй примеры и аналогии: {prompt}"
    }
    
    # Получаем шаблон для стиля или возвращаем исходный промпт
    return style_templates.get(style_id, prompt)


def get_available_styles() -> dict:
    """Возвращает доступные стили промптов"""
    return {
        1: {
            "name": "Профессиональный",
            "description": "Экспертный подход с точными и компетентными ответами"
        },
        2: {
            "name": "Творческий", 
            "description": "Креативный подход с нестандартными решениями"
        },
        3: {
            "name": "Аналитический",
            "description": "Детальный анализ с разбором по пунктам"
        },
        4: {
            "name": "Простой",
            "description": "Понятные объяснения для новичков с примерами"
        }
    }